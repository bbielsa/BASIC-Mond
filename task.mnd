var lexer = require("lexer.mnd");
var parser = require("parser.mnd");
var interpreter = require("interpreter.mnd");

fun parseLines(p, l) {
    var expressions = [];

    for(var line = 0; line < l.input.split("\n").length(); line++) {
        var lineExpression = p.parseLineExpression();
        var lineNumber = lineExpression[0];
        var expression = lineExpression[1];

        expressions.add({line: lineNumber, expression: expression});

        if(p.match("newline"))
            p.tokenStream.consume(); // consume new line
    }

    return expressions;
}

seq inputStream() {
    for(var i = 0; i < 100; i++)
        yield "FART";
}

var progTokens = [
    lexer.new("10 PRINT 'WHAT IS YOUR NAME?' : INPUT NAME : PRINT 'HELLO,';NAME;'FROM PROGRAM 1' : GOTO 10"),
    lexer.new("10 PRINT 'WHAT IS YOUR NAME?' : INPUT NAME : PRINT 'HELLO,';NAME;'FROM PROGRAM 2' : GOTO 10")];

var progExpressions = [
    parseLines(parser.new(progTokens[0].scan()), progTokens[0]),
    parseLines(parser.new(progTokens[1].scan()), progTokens[1])
];

var prog = [
    interpreter.new(progExpressions[0]),
    interpreter.new(progExpressions[1], inputStream)
];

Async.start(seq() {
    while(prog[0].running) {
        prog[0].step();
        yield Task.delay(1/10000000);
    }

    var exitCode = prog[0].variables["EXIT"];
    printLn("PROGRAM 1 EXITED CODE: " + exitCode);
});

Async.start(seq() {
    while(prog[1].running) {
        prog[1].step();
        yield Task.delay(1/10000000);
    }

    var exitCode = prog[1].variables["EXIT"];
    printLn("PROGRAM 2 EXITED CODE: " + exitCode);
});

Async.runToCompletion();
