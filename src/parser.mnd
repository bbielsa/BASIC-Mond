var prefixParselet = require("parselets/prefixparselet.mnd");
var statementParselet = require("parselets/statementparselet.mnd");
var stringParselet = require("parselets/stringparselet.mnd");
var numberParselet = require("parselets/numberparselet.mnd");
var infixParselet = require("parselets/infixparselet.mnd");
var postfixParselet = require("parselets/postfixparselet.mnd");
var multipleParselet = require("parselets/multipleparselet.mnd");

var tokenStream = require("tokenstream.mnd");

var STATEMENTS = [
    "IF",
    "THEN",
    "GOSUB",
    "PRINT",
    "INPUT",
    "GOTO",
    "RETURN",
    "END",
    "FOR"
];

var PRECEDENCES = {
    "=": 1,
    "statement": 0,
    "(": 2,
    ")": 2,

    ">": 2,
    "<": 2,
    ">=": 2,
    "<=": 2,
    "<>": 2,

    "+": 3,
    "-": 3,

    "*": 4,
    "/": 4,

    ":": 5
};

fun isStatement(token) {
    if(token.type != "name")
        return false;

    var name = token.lexeme;
    return name in STATEMENTS;
}

fun match(this, expected) {
    return expected == this.tokenStream.lookAhead(0).type;
}

fun parseLineExpression(this) {
    if(!this.match("number")) {
        //printLn("TOKEN:\t" + this.tokenStream.lookAhead(0).type);
        //debugger;
        error("No preceeding line number found.");
    }

    var number = this.tokenStream.consume().lexeme;

    //if(this.tokenStream.lookAhead(0).type == "name")
    //    debugger;
    //debugger;

    var left = this.parseExpression(0);

    var multiple = multipleParselet.new();
    //debugger;
    var multipleExpression = multiple.parse(this, left);

    if(multiple.expressions.length() <= 1)
        multipleExpression = null;

    //printLn(this.tokenStream.lookAhead(0).type);
    //this.tokenStream.consume(); // consume the new line

    return [number, multipleExpression || left];
}

fun getPrecedence(this) {
    var token = this.tokenStream.lookAhead(0).lexeme;
    var parselet = this.infixParselets[token] || this.postfixParselets[token];

    //if(isStatement(this.tokenStream.lookAhead(0)))
    //    return 1;

    return parselet ? PRECEDENCES[token] : 0;
}

fun parseExpression(this, precedence, comparison) {
    if(!this.tokenStream.hasMore())
        return null;

    var token = this.tokenStream.consume();
    var prefix = this.prefixParselets[token.type];

    if(isStatement(token))
        prefix = this.prefixParselets["statement"];

    if(token.lexeme == ":" || token.lexeme == "\n")
    {
        return null;
    }

    if(prefix == undefined)
        error("Illegal token `{0}`".format(token.lexeme));

    var left = prefix.parse(this, token);

    if(this.tokenStream.lookAhead(0)) {
        var t = this.tokenStream.lookAhead(0).type;

        if(this.postfixParselets[t]) {
            token = this.tokenStream.consume();
            left = this.postfixParselets[t].parse(this, token, precedence, left, comparison);
        }
    }
    //printLn(this.getPrecedence());
    //printLn("'{2}': {0} < {1}".format(precedence, this.getPrecedence(), this.tokenStream.lookAhead(0).lexeme));
    // does not handle postfix expressions yet
    while(precedence < this.getPrecedence()) {
        //debugger;
        token = this.tokenStream.consume();
        //printLn("TOKEN.LEXEME:\t" + token.lexeme);
        var parselet = this.infixParselets[token.type];// || this.postfixParselets[token.type];
        //printLn(parselet.type);
//        printLn()
        left = parselet.parse(this, token, precedence, left, comparison);
    }

    return left;
}

fun _parseExpression(this){
    var left = null;
    var token = this.tokenStream.consume();

    if(this.match("name")) {
        if(isStatement(token)) {
            var statement = statementParselet.new(this, -1, token);
            var statementExpression = statement.parse();
			left = statementExpression;
        }
        else {
            var name = prefixParselet.new(this, token);
            left = name.parse();
        }
    }
    else if(this.match("string")) {
        var str = stringParselet.new(this, token);
        left = str.parse();//this.tokenStream.lookAhead(0).lexeme;
    }
    else if(this.match("number")) {
        var num = numberParselet.new(this, token);
        left = num.parse();
    }

    token = this.tokenStream.consume();
    // Add equality sign
    if(this.match(">") || this.match("<") || this.match(">=") || this.match("<=") || this.match("<>")) {
        var gt = infixParselet.new(this, token, left);
        var gtExpression = gt.parse();

        return gtExpression;
    }
    if(this.match("+") || this.match("-") || this.match("*") || this.match("/")) {
        var math = infixParselet.new(this, token, left);
        var mathExpression = math.parse();

        return mathExpression;
    }
    else if(this.match("=")) {
        var assign = infixParselet.new(this, token, left);
        var assignExpression = assign.parse();

        return assignExpression;
    }
    else if(this.match("(")) {
        var argument = this.parseExpression();
        var call = postfixParselet.new(this, left.name, argument);
        var callExpression = call.parse();

        if(this.match(")"))
            this.tokenStream.consume();
        else
            error("Missing )");

        return callExpression;
    }


    return left;
}

fun new(tokens) {
    return {
        tokenStream: tokenStream.new(tokens),
        match: match,
        prefixParselets: {
            name: prefixParselet.new(),
            number: numberParselet.new(),
            statement: statementParselet.new(),
            string: stringParselet.new()
        },
        infixParselets: {
            ">": infixParselet.new(),
            "<": infixParselet.new(),
            ">=": infixParselet.new(),
            "<=": infixParselet.new(),
            "<>": infixParselet.new(),
            "=": infixParselet.new(),
            "+": infixParselet.new(),
            "-": infixParselet.new(),
            "*": infixParselet.new(),
            "/": infixParselet.new(),
        },
        postfixParselets: {
            "(": postfixParselet.new()
        },
        parseExpression: parseExpression,
        parseLineExpression: parseLineExpression,
        getPrecedence: getPrecedence
    }.enableThis();
}

return {new};
