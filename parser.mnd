var prefixParselet = require("parselets/prefixparselet.mnd");
var statementParselet = require("parselets/statementparselet.mnd");
var stringParselet = require("parselets/stringparselet.mnd");
var numberParselet = require("parselets/numberparselet.mnd");
var infixParselet = require("parselets/infixparselet.mnd");
var postfixParselet = require("parselets/postfixparselet.mnd");
var multipleParselet = require("parselets/multipleparselet.mnd");

var tokenStream = require("tokenstream.mnd");

var STATEMENTS = [
    "IF",
    "THEN",
    "GOSUB",
    "PRINT",
    "INPUT",
    "GOTO",
    "RETURN",
    "END"
];

fun isStatement(token) {
    if(token.type != "name")
        return false;

    var name = token.lexeme;
    return name in STATEMENTS;
}

fun match(this, expected) {
    return expected == this.tokenStream.lookAhead(0).type;
}

fun parseLineExpression(this) {
    if(!this.match("number")) {
        printLn("TOKEN:\t" + this.tokenStream.lookAhead(0).type);
        error("No preceeding line number found.");
    }

    var number = this.tokenStream.consume().lexeme;
    var left = this.parseExpression();
    var multiple = multipleParselet.new(this, left);
    var multipleExpression = null;

    while(this.match(":")) {
        this.tokenStream.consume();
        multiple.expressions.add(this.parseExpression());
    }

    if(multiple.expressions.length() > 1)
        multipleExpression = multiple.parse();

    return [number, multipleExpression || left];
}

fun getPrecedence(this) {
    var token = this.tokenStream.lookAhead(0).type;
    printLn("PRECEDENCE:\t" + token);
    if(token == "=") {
        return 1;
    }
    else if(token == ">" || token == "<" || token == ">=" || token == "<=" || token == "<>") {
        return 2;
    }
    else if(token == "+" || token == "-") {
        return 3;
    }
    else if(token == "*" || token == "/") {
        return 4;
    }
    else if(token == "name" || token == "string" || token == "number") {
        return 6;
    }
    else if(token == "(") {
        return 7;
    }

    return 0;
}

fun parseExpression(this, precedence) {
    var token = this.tokenStream.consume();
    var prefix = this.prefixParselets[token.type];

    if(prefix == undefined)
        error("Illegal token `{0}`".format(token.lexeme));

    var left = prefix.parse(this, token);

    printLn(this.getPrecedence());

    // does not handle postfix expressions yet
    while(precedence < this.getPrecedence()) {
        token = this.tokenStream.consume();
        var infix = this.infixParselets[token.type];
        printLn(token.type);
        var fart = infix.parse(this, token, left);
        printLn(fart.serialize());
    }

    return left;
}

fun _parseExpression(this){
    var left = null;
    var token = this.tokenStream.consume();

    if(this.match("name")) {
        if(isStatement(token)) {
            var statement = statementParselet.new(this, -1, token);
            var statementExpression = statement.parse();
			left = statementExpression;
        }
        else {
            var name = prefixParselet.new(this, token);
            left = name.parse();
        }
    }
    else if(this.match("string")) {
        var str = stringParselet.new(this, token);
        left = str.parse();//this.tokenStream.lookAhead(0).lexeme;
    }
    else if(this.match("number")) {
        var num = numberParselet.new(this, token);
        left = num.parse();
    }

    token = this.tokenStream.consume();
    // Add equality sign
    if(this.match(">") || this.match("<") || this.match(">=") || this.match("<=") || this.match("<>")) {
        var gt = infixParselet.new(this, token, left);
        var gtExpression = gt.parse();

        return gtExpression;
    }
    if(this.match("+") || this.match("-") || this.match("*") || this.match("/")) {
        var math = infixParselet.new(this, token, left);
        var mathExpression = math.parse();

        return mathExpression;
    }
    else if(this.match("=")) {
        var assign = infixParselet.new(this, token, left);
        var assignExpression = assign.parse();

        return assignExpression;
    }
    else if(this.match("(")) {
        var argument = this.parseExpression();
        var call = postfixParselet.new(this, left.name, argument);
        var callExpression = call.parse();

        if(this.match(")"))
            this.tokenStream.consume();
        else
            error("Missing )");

        return callExpression;
    }


    return left;
}

fun new(tokens) {
    return {
        tokenStream: tokenStream.new(tokens),
        match: match,
        prefixParselets: {
            name: prefixParselet.new(),
            number: numberParselet.new(),
            statement: statementParselet.new(),
            string: stringParselet.new()
        },
        infixParselets: {
            ">": infixParselet.new(),
            "<": infixParselet.new(),
            ">=": infixParselet.new(),
            "<=": infixParselet.new(),
            "<>": infixParselet.new(),
            "=": infixParselet.new(),
            "+": infixParselet.new(),
            "-": infixParselet.new(),
            "*": infixParselet.new(),
            "/": infixParselet.new(),
        },
        postfixParselets: {
            "(": postfixParselet.new()
        },
        parseExpression: parseExpression,
        parseLineExpression: parseLineExpression,
        getPrecedence: getPrecedence
    }.enableThis();
}

return {new};
