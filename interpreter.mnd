fun rep(str, times) {
    var s = "";

    for(var i = 0; i < times; i++)
        s += str;

    return s;
}
var random = Random();

fun FART(times) {
    return rep("FART ", times);
}

fun INT(number) {
    return Math.floor(number);
}

fun interpret(this) {
    while(this.running)
        this.step();

    if(!this.ignoring)
        printLn("\nInterpreter halted");
}

fun step(this) {
    if(this.line >= this.expressions.length())
    {
        this.running = false;
        return;
    }

    if(this.ignoring) {
        if(this.expressions[this.line].expression.type != "print")
            this.expressions[this.line++].expression.run(this);
        else
            this.line++;
    }
    else
        this.expressions[this.line++].expression.run(this);

    return {};
}

fun interpretSubroutine(this, start) {
    var line = this.line;
    this.setLine(start);
    this.inSubroutine = true;

    while(this.running && this.inSubroutine) {
        this.step();
    }

    this.line = line;
}

// destination is in BASIC line units, not index of expression in `expressions`
fun setLine(this, destination) {
    var i = 0;
    foreach(var exp in this.expressions) {
        if(exp.line == destination)
        {
            this.line = i;
            return;
        }

        i++;
    }

    // if line doesnt exist stop execution
    this.running = false;
}

seq standardInput() {
    while(true)
        yield readLn();
}

fun new(expressions, inputStream, ignoreOutput) {
    if(inputStream == undefined || inputStream == null) {
        inputStream = standardInput;

        if(!ignoreOutput)
            printLn("Using standard input");
    }

    return {
        expressions: expressions,
        line: 0,
        running: true,
        ignoring: ignoreOutput,
        inSubroutine: false,
        variables: {},
        functions: {
            TAB: fun(times) -> rep("  ", times),
            RND: fun(max) -> random.nextDouble() % max,
            NUM: fun(str) -> Json.deserialize(str),
            //HTTPGET: fun(url) -> Http.get(url),
            FART: FART,
            INT: INT
        },

        interpret: interpret,
        interpretSubroutine: interpretSubroutine,
        inputStream: inputStream().getEnumerator(),
        step: step,
        setLine: setLine
    }.enableThis();
}

return {new};
