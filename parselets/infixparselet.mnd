var booleanExpression = require("expressions/booleanexpression.mnd");
var assignExpression = require("expressions/assignexpression.mnd");
var mathExpression = require("expressions/mathexpression.mnd");

var OPERATORS = {
    ">": 0,
    "<": 1,
    ">=": 2,
    "<=": 3,
    "<>": 5,

    "=": 6,

    "+": 7,
    "-": 8,
    "*": 9,
    "/": 10
};

fun parse(this, parser, token, precedence, left, comparison) {
    if(OPERATORS[token.lexeme] < 6)
    {
        var right = parser.parseExpression(0);
        return booleanExpression.new(OPERATORS[token.lexeme], left, right);
    }
    else if(OPERATORS[token.lexeme] == 6){
        if(!comparison)
        {

            var right = parser.parseExpression(parser.getPrecedence());

            if(left.type != "name")
                error("Cannot assign to non-name expression");

                return assignExpression.new(left, right);
        }
        else
        {
            var right = parser.parseExpression(0);
            return booleanExpression.new(OPERATORS[token.lexeme], left, right);
        }
    }
    else if(OPERATORS[token.lexeme] > 6) {
        var right = parser.parseExpression(3);
        return mathExpression.new(OPERATORS[token.lexeme], left, right);
    }
}

fun new() {
    return {
        parse: parse,
        type: "infix"
    }.enableThis();
}

return {new};
